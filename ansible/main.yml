---
#
#  Tasks and roles for all hosts
#
# - hosts: t
#   gather_facts: no
#
#   pre_tasks:
#       - import_tasks: tasks/ssh_juggle_port.yml
#         tags:
#             - port
#

# Proxmox Initialization
- hosts: proxmox
  # TODO Dynamic
  # connection: local
  become: true
  # become_user: ansible
  #remote_user: root

  roles:
      - role: ubuntucloudinit
      - role: vminit

  tasks:
      - include: roles/installk8s/tasks/install_k8s_binaries.yml
        become_user: root

# Verify all newly created VMs are accessoble by SSH
- hosts: controllers:workers
  gather_facts: false
  become: true
  # TODO dynamic
  remote_user: capricorn
  tasks:
      - name: Wait For New VMs
        ansible.builtin.wait_for_connection:
            timeout: 600
      - name: Done With VM Creation
        debug:
            msg: "Hooray!"

# Capricorn Node Setup
- hosts: controllers:workers
  become: true
  remote_user: capricorn
  roles:
      - role: installk8s

# Master Node Specific Setup
- hosts: maincontroller
  become: true
  remote_user: capricorn
  tasks:
      - name: Get IP Address
        ansible.builtin.shell: "ip address show eth0 | grep 'inet ' | awk '{ print $2 }' | cut -d '/' -f1"
        register: ip_result

      - name: Get Hostname
        ansible.builtin.command: hostname -s
        register: hostname_result

      - name: Setup Static Pod Yaml for Kube-VIP
        # dump files/kube-vip.yaml into /etc/kubernetes/manifests/kube-vip.yaml
        block:
            - name: Ensure Manifests Directory Exists
              ansible.builtin.file:
                  path: /etc/kubernetes/manifests
                  state: directory
                  mode: '0755'
            - name: Get Kube-VIP Version
              ansible.builtin.shell: curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name"
              register: kube_vip_version
            - name: Generate Static Pod Manifest for Kube-Vip
              # ansible.builtin.shell: "sudo ctr image pull ghcr.io/kube-vip/kube-vip:{{ kube_vip_version.stdout }}; sudo ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:{{ kube_vip_version.stdout }} vip /kube-vip manifest pod --interface eth0 --address {{ controlplane_endpoint_ipaddress }} --controlplane --arp --leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml"
              ansible.builtin.shell: "sudo ctr image pull ghcr.io/kube-vip/kube-vip:{{ kube_vip_version.stdout }}; sudo ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:{{ kube_vip_version.stdout }} vip /kube-vip manifest pod --interface eth0 --address {{ controlplane_endpoint_ipaddress }} --controlplane --arp --leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml"
              # sudo ctr image pull ghcr.io/kube-vip/kube-vip:{{ kube_vip_version.stdout }};
              # sudo ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:{{ kube_vip_version.stdout }} vip
              #   /kube-vip manifest pod --interface eth0 --address {{ controlplane_endpoint_ipaddress }} --controlplane --arp --leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml"

              #  # export VIP=192.168.11.3    {{ controlplane_endpoint_ipaddress  }}
              #  # export INTERFACE=eth0
              #  # sudo apt install jq
              #  # KVVERSION=$(curl -sL https://api.github.com/repos/kube-vip/kube-vip/releases | jq -r ".[0].name")
              #  # alias kube-vip="sudo ctr image pull ghcr.io/kube-vip/kube-vip:$KVVERSION; sudo ctr run --rm --net-host ghcr.io/kube-vip/kube-vip:$KVVERSION vip /kube-vip"
              #  # kube-vip manifest pod --interface $INTERFACE --address $VIP --controlplane --arp --leaderElection | sudo tee /etc/kubernetes/manifests/kube-vip.yaml

      - name: Copy Generated kube-vip manifest to localhost
        ansible.builtin.fetch:
            src: /etc/kubernetes/manifests/kube-vip.yaml
            dest: files/kube-vip.yaml
            flat: true

      # TODO ok, this is weird, but it might work.  Maybe a timer too?
      # Otherwise, we may need to implement a retry mechanism ala kubeadm reset, delete cni... actually lets do that anyway
      - name: Copy Generated Kube-VIP manifest to Controller Node
        copy: src=files/kube-vip.yaml dest=/etc/kubernetes/manifests/kube-vip.yaml mode=0777


      # - name: Delete cni folder
      #   ansible.builtin.file:
      #     path: /etc/cni/net.d
      #     state: absent

      - name: Generate Certificate Key
        ansible.builtin.command: kubeadm certs certificate-key
        register: certkey

      # - name: Wait here for some reason
      #   ansible.builtin.wait_for:
      #     timeout: 6000

      - name: Template Kubeadm Config
        ansible.builtin.template:
            src: files/kubeadm-config.j2.yaml
            dest: ./kubeadm-config.yaml

      - name: Apply Kubeadm Config
        #ansible.builtin.command: sudo kubeadm init --v=6 --config kubeadm-config.yaml
        ansible.builtin.command: sudo kubeadm init --v=6 --config kubeadm-config.yaml --upload-certs
        environment:
            # TODO these env variables are probably not needed.  They used to be used in the command line arguments
            IPADDR: "{{ ip_result.stdout }}"
            NODENAME: "{{ hostname_result.stdout }}"

      - name: Setup kubeconfig for user
        command: "{{ item }}"
        with_items:
            - mkdir -p /home/capricorn/.kube
            - cp -i /etc/kubernetes/admin.conf /home/capricorn/.kube/config
            - chown capricorn:capricorn /home/capricorn/.kube/config

      - name: Apply Flannel Manifest
        command: kubectl apply -f https://github.com/coreos/flannel/raw/master/Documentation/kube-flannel.yml --kubeconfig=/home/capricorn/.kube/config
        # command: sudo kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/v0.20.2/Documentation/kube-flannel.yml --kubeconfig=/home/capricorn/.kube/config
        retries: 10
        delay: 10
        register: result
        until: result.rc == 0

      - name: Generate Join Command
        command: kubeadm token create --print-join-command
        register: join_command

      - name: Copy Join Command for Worker Nodes
        local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command-worker"

      - name: Copy Join Command for Controller Nodes
        local_action: copy content="{{ join_command.stdout_lines[0] }} --control-plane --certificate-key {{ certkey.stdout }}" dest="./join-command-controller"

      - name: Copy Kubernetes Credentials to HOME
        ansible.builtin.fetch:
            src: /home/capricorn/.kube/config
            dest: files/kube-config
            flat: true

      - name: CHOWN Kubernetes Credentials
        delegate_to: localhost
        ansible.builtin.file:
            path: files/kube-config
            owner: "{{ localuser }}"
            group: "{{ localuser }}"

## Secondary Master Node(s) setup
- hosts: secondarycontrollers
  become: true
  remote_user: capricorn
  tasks:
      - name: Ensure Manifests Directory on Secondary Controllers
        ansible.builtin.file:
            path: /etc/kubernetes/manifests
            state: directory
            mode: '0755'

      - name: Copy Generated Kube-VIP manifest to Controller Node
        copy: src=files/kube-vip.yaml dest=/etc/kubernetes/manifests/kube-vip.yaml mode=0777

      - name: Copy Join Command To Controller Node
        copy: src=join-command-controller dest=/tmp/join-command.sh mode=0777

      - name: Join the Node to the Cluster
        ansible.builtin.command: sh /tmp/join-command.sh


# Worker Node Specific Setup
- hosts: workers
  become: yes
  remote_user: capricorn
  tasks:
      - name: Copy Join Command To Worker Node
        copy: src=join-command-worker dest=/tmp/join-command.sh mode=0777

      - name: Join the Node to the Cluster
        ansible.builtin.command: sh /tmp/join-command.sh


# Install Age, Go-Task, pre-commit
- hosts: localhost
  become: yes
  # become_user: ansible
  tasks:
      - name: Install Local Packages
        ansible.builtin.apt:
            name: "{{ packages }}"
            state: present
            update_cache: yes
        vars:
            packages:
                - age
                - pre-commit
                - jq

      - name: Install Go-Task
        ansible.builtin.shell: >
            sudo sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin
        args:
            creates: /usr/local/bin/task

      - name: Install yq
        ansible.builtin.shell: >
          wget https://github.com/mikefarah/yq/releases/download/v4.27.2/yq_linux_amd64.tar.gz -O - |  tar xz && mv yq_linux_amd64 /usr/local/bin/yq
        args:
            creates: /usr/local/bin/yq

      - name: Check if sops is installed
        command: dpkg-query -W sops
        register: check_deb
        failed_when: check_deb.rc > 1
        changed_when: check_deb.rc == 1

      - name: Download my_package
        get_url:
            url=https://github.com/mozilla/sops/releases/download/v3.7.3/sops_3.7.3_amd64.deb
            dest="./files/sops_3.7.3_amd64.deb"
        when: check_deb.rc == 1

      - name: Install my_package
        apt: deb="./files/sops_3.7.3_amd64.deb"
        when: check_deb.rc == 1


# Setup Host Tools
- hosts: localhost
  become: yes
  become_user: "{{ localuser }}"
  tasks:
      - name: Ensure Age Key Directory
        ansible.builtin.file:
            path: ~/.config/sops/age
            state: directory
            mode: '0755'

      - name: Ensure Cluster Directory
        ansible.builtin.file:
            path: "{{ cluster_path }}"
            state: directory
            mode: '0755'

      - name: Create Age Key
        # ansible.builtin.command: age-keygen -o age.agekey
        ansible.builtin.command: "age-keygen -o ~/.config/sops/age/keys.txt"
        args:
            chdir: "{{ cluster_path }}"
            # creates: "{{ cluster_name }}"/age.agekey
            creates: ~/.config/sops/age/keys.txt

      - name: Get Age Pubkey
        ansible.builtin.slurp:
            src: ~/.config/sops/age/keys.txt
        register: age_key_file

      - name: Ensure envrc
        ansible.builtin.file:
            path: "{{ cluster_path }}/.envrc"
            state: touch

      - name: Add Age Pubkey to envrc
        ansible.builtin.lineinfile:
            path: "{{ cluster_path }}/.envrc"
            regexp: '^export BOOTSTRAP_AGE_PUBLIC_KEY'
            line: "export BOOTSTRAP_AGE_PUBLIC_KEY=\"{{ age_key_file['content'] | b64decode | regex_findall('public key: (.+)') | first }}\""

      # TODO Update .sops.yaml with AGE public key
      - name: Copy .sops.yaml from Templates
        ansible.builtin.template:
            src: "files/.sops.yaml.j2"
            dest: "{{ cluster_path }}/.sops.yaml"
        vars:
            AGE_PUBLIC_KEY: "{{ age_key_file['content'] | b64decode | regex_findall('public key: (.+)') | first }}"

      - name: Ensure cert-manager directory
        ansible.builtin.file:
            path: "{{ cluster_path }}/infrastructure/networking/traefik"
            state: directory
            mode: '0755'

      # TODO Copy cert-manager-secret from files to cluster directory
      - name: Copy cert-manager-secret from files to cluster
        ansible.builtin.copy:
            src: files/cert-manager-secret.sops.yaml
            dest: "{{ cluster_path }}/infrastructure/networking/traefik/cert-manager-secret.sops.yaml"

      # TODO Encrypt cert-manager-secret
      - name: Encrypt cert-manager-secret
        ansible.builtin.command: "sops -e --in-place infrastructure/networking/traefik/cert-manager-secret.sops.yaml"
        args:
            chdir: "{{ cluster_path }}"

      - name: Initialize Go-Task
        ansible.builtin.command: task --init
        args:
            # TODO make dynamic
            chdir: "{{ cluster_path }}"
            creates: "{{ cluster_path }}/Taskfile.yaml"

      - name: Enable Pre-Commit
        ansible.builtin.command: task precommit:init
        args:
            # TODO make dynamic
            chdir: "{{ cluster_path }}"

      - name: Update Pre-Commit
        ansible.builtin.command: task precommit:update
        args:
            # TODO make dynamic
            chdir: "{{ cluster_path }}"

      - name: Ensure kube-config directory
        ansible.builtin.file:
            path: "/home/{{ localuser }}/.kube"
            state: directory
            mode: '0755'

      - name: Copy kube-config to local user
        ansible.builtin.copy:
            src: files/kube-config
            dest: "/home/{{ localuser }}/.kube/config"

# Install Flux
- hosts: localhost
  become: yes
  become_user: "{{ localuser }}"
  tasks:
      - name: Install Flux CLI
        ansible.builtin.shell: "curl -s https://fluxcd.io/install.sh | sudo bash"
        # TODO add this line to profile for bash completions:
        # . <(flux completion bash)

      - name: Check Flux Prereqs
        # TODO move output files to their own folder for clarity
        # TODO make sure this actually points to the correct kube-config
        ansible.builtin.command: flux check --pre --kubeconfig files/kube-config

      - name: Include Flux Data from Var File
        ansible.builtin.include_vars:
            file: files/flux_data.yaml
            name: flux_data

      - name: Initialize Flux
        ansible.builtin.command: task cluster:install
        args:
            chdir: "{{ cluster_path }}"
        register: cluster_install
        failed_when: cluster_install.rc > 1
        changed_when: cluster_install.rc == 1
